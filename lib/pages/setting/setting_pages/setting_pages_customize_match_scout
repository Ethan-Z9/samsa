import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:frc_scout_app/form/form_config.dart';

class CustomizeMatchScout extends StatefulWidget {
  const CustomizeMatchScout({super.key});

  @override
  State<CustomizeMatchScout> createState() => _CustomizeMatchScoutState();
}

class _CustomizeMatchScoutState extends State<CustomizeMatchScout> {
  List<FormConfig> formConfigs = [];

  @override
  void initState() {
    super.initState();
    _loadConfigs();
  }

  Future<void> _loadConfigs() async {
    final prefs = await SharedPreferences.getInstance();
    final jsonString = prefs.getString('formConfigs');
    if (jsonString != null) {
      final List decoded = json.decode(jsonString);
      setState(() {
        formConfigs = decoded.map((item) => FormConfig.fromJson(item)).toList();
      });
    }
  }

  Future<void> _saveConfigs() async {
    final prefs = await SharedPreferences.getInstance();
    final jsonList = formConfigs.map((c) => c.toJson()).toList();
    await prefs.setString('formConfigs', json.encode(jsonList));
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Saved configuration')),
    );
  }

  void _addForm(FormType type) {
    final labelController = TextEditingController();
    final extraController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Add ${type.name}'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(controller: labelController, decoration: const InputDecoration(labelText: 'Label')),
              if (type == FormType.radio || type == FormType.selection)
                TextField(
                  controller: extraController,
                  decoration: const InputDecoration(labelText: 'Options (comma separated)'),
                ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                final extra = <String, dynamic>{};
                if (type == FormType.radio || type == FormType.selection) {
                  final options = extraController.text.split(',').map((e) => e.trim()).toList();
                  extra['options'] = options;
                }
                Navigator.of(context).pop();
                setState(() {
                  formConfigs.add(FormConfig(
                    type: type,
                    label: labelController.text,
                    extraParams: extra,
                  ));
                });
              },
              child: const Text('Add'),
            ),
          ],
        );
      },
    );
  }

  void _removeForm(int index) {
    setState(() {
      formConfigs.removeAt(index);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Customize Match Scout')),
      body: Column(
        children: [
          ElevatedButton(
            onPressed: _saveConfigs,
            child: const Text('Save Configuration'),
          ),
          Wrap(
            spacing: 8,
            children: FormType.values.map((type) {
              return ElevatedButton(
                onPressed: () => _addForm(type),
                child: Text(type.name),
              );
            }).toList(),
          ),
          const SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: formConfigs.length,
              itemBuilder: (context, index) {
                final config = formConfigs[index];
                return ListTile(
                  title: Text('${config.label} (${config.type.name})'),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete),
                    onPressed: () => _removeForm(index),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
